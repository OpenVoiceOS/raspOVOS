#!/bin/bash
# ovos-update-script
# This script updates OpenVoiceOS packages based on the specified tag.

# Function to print messages with different severity levels
print_message() {
    local message=$1
    local type=$2

    case $type in
        info)
            echo -e "\033[1;34m[INFO]\033[0m $message"
            ;;
        success)
            echo -e "\033[1;32m[SUCCESS]\033[0m $message"
            ;;
        warning)
            echo -e "\033[1;33m[WARNING]\033[0m $message"
            ;;
        error)
            echo -e "\033[1;31m[ERROR]\033[0m $message"
            ;;
        *)
            echo "$message"
            ;;
    esac
}

# Print a header
print_message "Starting OpenVoiceOS update process..." "info"

# Set the default tag
TAG=$(cat /opt/ovos/tag)  # alpha, testing, stable

# Check if the tag file exists and is readable
if [[ ! -f /opt/ovos/tag ]]; then
    print_message "Error: Unable to find the tag file at /opt/ovos/tag. Please ensure OpenVoiceOS is properly installed." "error"
    exit 1
fi

# Print which tag is being used
print_message "Using update tag: $TAG" "info"

# Set the constraints file based on the tag
CONSTRAINTS="https://github.com/OpenVoiceOS/ovos-releases/raw/refs/heads/main/constraints-$TAG.txt"

# Print information about the constraints file
print_message "Using constraints file: $CONSTRAINTS" "info"

# Get the list of installed packages that match the pattern
INSTALLED_PACKAGES=$(uv pip list --format=freeze | grep -E 'ovos-|skill-' | cut -d '=' -f 1)

# Check if there are any installed packages
if [[ -z "$INSTALLED_PACKAGES" ]]; then
    print_message "No installed packages matching 'ovos-' or 'skill-' found." "warning"
else
    print_message "Found the following installed packages to update:" "info"
    echo "$INSTALLED_PACKAGES" | while read -r pkg; do
        echo -e "\033[1;36m- $pkg\033[0m"
    done
fi

# Update packages based on the tag
print_message "Updating packages..." "info"
if [[ "$TAG" == "alpha" ]]; then
    uv pip install -c "$CONSTRAINTS" -U --pre $INSTALLED_PACKAGES "$@"
else
    uv pip install -c "$CONSTRAINTS" -U $INSTALLED_PACKAGES "$@"
fi

# Print success message
print_message "Update completed successfully." "success"

# Optional: Check if the update was successful and notify the user
if [[ $? -eq 0 ]]; then
    print_message "All packages have been updated successfully!" "success"
else
    print_message "An error occurred during the update process. Please check the logs for more details." "error"
    exit 1
fi
