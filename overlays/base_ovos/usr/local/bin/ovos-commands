#!/usr/bin/env python
import json
import random
import os
import importlib
from langcodes import closest_supported_match
from ovos_config import Configuration
from ovos_utils.lang import standardize_lang_tag
from ovos_plugin_manager.skills import find_skill_plugins

# ANSI escape sequences for colors
RESET = "\033[0m"
CYAN = "\033[96m"
YELLOW = "\033[93m"
GREEN = "\033[92m"
RED = "\033[91m"
BLUE = "\033[94m"
MAGENTA = "\033[95m"

def print_header(title: str):
    """Print a formatted header for better visibility in terminal"""
    print(f"{CYAN}##########################{RESET}")
    print(f"{YELLOW}{title}{RESET}")
    print(f"{CYAN}##########################{RESET}")

def print_error(message: str):
    """Print error messages in red for better visibility"""
    print(f"{RED}ERROR: {message}{RESET}")

def print_success(message: str):
    """Print success messages in green"""
    print(f"{GREEN}{message}{RESET}")

def print_skill_info(skill_id: str, metadata: dict):
    """Print the skill details with examples in a formatted way"""
    print(f"\n{BLUE}Skill name:{RESET} {YELLOW}{skill_id}{RESET}")
    print(f"{BLUE}Description:{RESET} {YELLOW}{metadata.get('description', 'No description available')}{RESET}")
    print(f"{BLUE}Usage examples:{RESET}")
    for example in metadata["examples"][:10]:
        print(f"    - {MAGENTA}{example}{RESET}")

if __name__ == "__main__":
    lang = Configuration().get("lang", "en-us")
    lang = standardize_lang_tag(lang)

    print_header("OpenVoiceOS - Skills help")

    print("\nScanning skills...")
    plugins = find_skill_plugins()
    skills = list(plugins.keys())
    print(f"Found {GREEN}{len(skills)}{RESET} installed skills")

    if not skills:
        exit(1)

    print("Skill ids:")
    for idx, s in enumerate(skills):
        print(f"{CYAN}{idx}{RESET}) - {YELLOW}{s}{RESET}")

    s = input("Select skill number: ")
    skill_id = skills[int(s)]
    plug = plugins[skill_id]
    p = importlib.import_module(plug.__module__)
    base_dir = os.path.join(os.path.dirname(p.__file__), "locale")

    if not os.path.isdir(base_dir):
        print_error(f"Skill {skill_id} has no locale")
        exit()

    locale = closest_supported_match(lang, os.listdir(base_dir))
    if locale is None or locale == "und":
        print_error(f"{skill_id} does not support {lang}")
        exit()

    for root, folders, files in os.walk(os.path.join(base_dir, locale)):
        if "skill.json" in files:
            with open(os.path.join(root, "skill.json")) as f:
                data = json.load(f)
                if not data.get("examples"):
                    print_error(f"{skill_id} does not provide usage examples")
                    continue
                random.shuffle(data["examples"])
                print_skill_info(skill_id, data)
        else:
            print_error(f"{skill_id} does not provide metadata")
