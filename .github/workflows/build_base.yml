name: Build Base No-OVOS Headless Image

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/build_base.yml'
      - 'build_base.sh'
      - 'setup_spotify.sh'
      - 'setup_cpugovernor.sh'
      - 'setup_fstab.sh'
      - 'setup_nmanager.sh'
      - 'setup_pipewire.sh'
      - 'setup_ramdisk.sh'
      - 'setup_sysctl.sh'
      - 'setup_udev.sh'
      - 'setup_wlan0power.sh'
      - 'setup_ram.sh'

jobs:
  # Stage 1: Get Current Date and Release Name
  get-date-release-name:
    runs-on: ubuntu-latest
    outputs:
      release_name: ${{ steps.current-date.outputs.release_name }}
      cache_key: ${{ steps.current-date.outputs.cache_key }}
    steps:
      - name: Get Current Date and Release Name
        id: current-date
        run: |
          current_date=$(date +'%Y-%m-%d')
          release_name="raspOVOS-NO-OVOS-bookworm-arm64-lite-${current_date}"
          cache_key="raspOVOS-${{ github.run_id }}"
          echo "release_name=$release_name" >> $GITHUB_OUTPUT
          echo "cache_key=$cache_key" >> $GITHUB_OUTPUT

      - name: Print outputs
        shell: bash
        run: |
          echo 'cache_key: ${{ steps.current-date.outputs.cache_key }}'
          echo 'release_name: ${{ steps.current-date.outputs.release_name }}'


  # Stage 2: Build Image
  modify-rpi-image:
    runs-on: ubuntu-latest
    needs: get-date-release-name
    outputs:
      image-path: ${{ steps.create-image.outputs.image-path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add OVOS to Raspberry Pi OS Bookworm
        uses: TigreGotico/rpi-image-modifier@main
        id: create-image
        env:
          USER: 'ovos'
          PASSWORD: 'ovos'
          HOSTNAME: "raspOVOS"
        with:
          base-image-url: https://downloads.raspberrypi.com/raspios_lite_arm64/images/raspios_lite_arm64-2024-11-19/2024-11-19-raspios-bookworm-arm64-lite.img.xz
          image-path: raspOVOS-NO-OVOS-bookworm-arm64-lite.img
          compress-with-xz: true
          cache: true
          shrink: true
          mount-repository: true
          env-vars: USER,PASSWORD,HOSTNAME
          script-path: build_base.sh

      - name: Print outputs
        shell: bash
        run: |
          echo 'image-path: ${{ steps.create-image.outputs.image-path }}'
          echo 'image-size: ${{ steps.create-image.outputs.image-size }}'
          echo 'image-sha256sum: ${{ steps.create-image.outputs.image-sha256sum }}'

      - name: Save Image to Cache
        uses: actions/cache@v4
        with:
          path: ./cache
          key: ${{ needs.get-date-release-name.outputs.cache_key }}

  # Stage 3: Check if Release Exists and Create if Needed
  check-release-or-create:
    runs-on: ubuntu-latest
    needs: [get-date-release-name, modify-rpi-image]
    outputs:
      release_id: ${{ steps.get-release-id.outputs.release_id }}
    steps:
      - name: Check if Release Exists
        id: get-release-id
        run: |
          release_name="${{ needs.get-date-release-name.outputs.release_name }}"
          release=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$release_name")
          release_id=$(echo $release | jq -r .id)
          if [[ "$release_id" == "null" ]]; then
            release=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"tag_name\":\"$release_name\",\"name\":\"$release_name\",\"body\":\"Testing base OS setup only.\"}" \
              "https://api.github.com/repos/${{ github.repository }}/releases")
            release_id=$(echo $release | jq -r .id)
          fi
          echo "release_id=$release_id" >> $GITHUB_OUTPUT

      - name: Print outputs
        shell: bash
        run: |
          echo 'release_id: ${{ steps.get-release-id.outputs.release_id }}'



  # Stage 4: Upload to Release
  upload-release:
    runs-on: ubuntu-latest
    needs: [modify-rpi-image, check-release-or-create, get-date-release-name]
    if: always()
    steps:
      - name: Restore Cache for Image
        uses: actions/cache@v4
        with:
          path: ./cache
          key: ${{ needs.get-date-release-name.outputs.cache_key }}

      - name: Debug Cache Content
        run: ls ./cache

      - name: Upload to release
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: ./cache/${{ needs.modify-rpi-image.outputs.image-path }}
          release_id: ${{ needs.check-release-or-create.outputs.release_id }}
          draft: false
          overwrite: true
          prerelease: false
          verbose: true
